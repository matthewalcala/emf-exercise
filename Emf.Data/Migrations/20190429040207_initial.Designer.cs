// <auto-generated />
using Emf.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Emf.Data.Migrations
{
    [DbContext(typeof(EmfDbContext))]
    [Migration("20190429040207_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Emf.Core.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentType");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new { Id = 1, DepartmentType = 1, Description = "Internal Web App Division", Name = "IT Web Internal" },
                        new { Id = 2, DepartmentType = 1, Description = "Sitecore Web Development Division", Name = "Sitecore Web Dev" },
                        new { Id = 3, DepartmentType = 2, Description = "News division", Name = "News" }
                    );
                });

            modelBuilder.Entity("Emf.Core.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Address2")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new { Id = 1, Address1 = "1000 Main Street", Address2 = "", City = "Lincoln", DepartmentId = 1, Email = "mattalcala@gmail.com", FirstName = "Mateo", LastName = "Alcala", Phone = "1234567890", State = "CA", Zipcode = "95648" },
                        new { Id = 2, Address1 = "1000 Blues St", Address2 = "", City = "Folsom", DepartmentId = 2, Email = "jc@gmail.com", FirstName = "Johnny", LastName = "Cash", Phone = "1234567890", State = "CA", Zipcode = "95887" },
                        new { Id = 3, Address1 = "1000 Blues St", Address2 = "", City = "Folsom", DepartmentId = 2, Email = "jc@gmail.com", FirstName = "George", LastName = "Lucas", Phone = "1234567890", State = "CA", Zipcode = "95887" },
                        new { Id = 4, Address1 = "1000 Main Street", Address2 = "", City = "Lincoln", DepartmentId = 1, Email = "mattalcala@gmail.com", FirstName = "John", LastName = "Rapid", Phone = "1234567890", State = "CA", Zipcode = "95648" },
                        new { Id = 5, Address1 = "1000 Blues St", Address2 = "", City = "Folsom", DepartmentId = 2, Email = "jc@gmail.com", FirstName = "Max", LastName = "Power", Phone = "1234567890", State = "CA", Zipcode = "95887" },
                        new { Id = 6, Address1 = "1000 Blues St", Address2 = "", City = "Folsom", DepartmentId = 2, Email = "jc@gmail.com", FirstName = "Kid", LastName = "Man", Phone = "1234567890", State = "CA", Zipcode = "95887" },
                        new { Id = 7, Address1 = "1000 Main Street", Address2 = "", City = "Lincoln", DepartmentId = 1, Email = "mattalcala@gmail.com", FirstName = "Bob", LastName = "Bee", Phone = "1234567890", State = "CA", Zipcode = "95648" },
                        new { Id = 8, Address1 = "1000 Blues St", Address2 = "", City = "Folsom", DepartmentId = 2, Email = "jc@gmail.com", FirstName = "Koda", LastName = "Tuko", Phone = "1234567890", State = "CA", Zipcode = "95887" },
                        new { Id = 9, Address1 = "1000 Blues St", Address2 = "", City = "Folsom", DepartmentId = 2, Email = "jc@gmail.com", FirstName = "Luke", LastName = "Skywalker", Phone = "1234567890", State = "CA", Zipcode = "95887" },
                        new { Id = 10, Address1 = "1000 Main Street", Address2 = "", City = "Lincoln", DepartmentId = 1, Email = "mattalcala@gmail.com", FirstName = "Steve", LastName = "Gates", Phone = "1234567890", State = "CA", Zipcode = "95648" },
                        new { Id = 11, Address1 = "1000 Blues St", Address2 = "", City = "Folsom", DepartmentId = 2, Email = "jc@gmail.com", FirstName = "Billy", LastName = "Jobs", Phone = "1234567890", State = "CA", Zipcode = "95887" },
                        new { Id = 12, Address1 = "1000 Blues St", Address2 = "", City = "Folsom", DepartmentId = 2, Email = "jc@gmail.com", FirstName = "Outa", LastName = "Names", Phone = "1234567890", State = "CA", Zipcode = "95887" }
                    );
                });

            modelBuilder.Entity("Emf.Core.Employee", b =>
                {
                    b.HasOne("Emf.Core.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
